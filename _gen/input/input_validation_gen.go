// Code generated by go generate; DO NOT EDIT.
package myapp

import (
	"fmt"
	"time"

	"github.com/go-playground/validator/v10"
)

var validate = validator.New()

// UserInputValidated represents a validated UserInput.
// Its existence guarantees that all data within it has passed initial validation rules.
type UserInputValidated struct {
	Email          string
	HashedPassword string
	DisplayName    string
	DateOfBirth    time.Time
	CreatedAt      string
	UnusedField    string
}

// ToUserInputValidated takes a UserInput, validates it, and if successful,
// converts it into a UserInputValidated.
func (input UserInput) ToUserInputValidated() (*UserInputValidated, error) {
	if err := validate.Struct(input); err != nil {
		return nil, fmt.Errorf("validation failed for UserInput: %w", err)
	}

	validated := &UserInputValidated{} // Use the generated domain type
	validated.Email = input.Email      // Direct copy
	// Custom transformation for field 'Password' handled by its type's ToValidated method.
	PasswordTransformed, err := input.Password.ToValidated()
	if err != nil {
		return nil, fmt.Errorf("failed to transform field 'Password': %w", err)
	}
	validated.HashedPassword = PasswordTransformed
	validated.DisplayName = input.DisplayName // Direct copy
	// Custom transformation for field 'DateOfBirthStr' handled by its type's ToValidated method.
	DateOfBirthStrTransformed, err := input.DateOfBirthStr.ToValidated()
	if err != nil {
		return nil, fmt.Errorf("failed to transform field 'DateOfBirthStr': %w", err)
	}
	validated.DateOfBirth = DateOfBirthStrTransformed
	validated.CreatedAt = input.CreatedAt     // Direct copy
	validated.UnusedField = input.UnusedField // Direct copy

	return validated, nil
}

// ProductInputValidated represents a validated ProductInput.
// Its existence guarantees that all data within it has passed initial validation rules.
type ProductInputValidated struct {
	Name        string
	Price       float64
	Description string
}

// ToProductInputValidated takes a ProductInput, validates it, and if successful,
// converts it into a ProductInputValidated.
func (input ProductInput) ToProductInputValidated() (*ProductInputValidated, error) {
	if err := validate.Struct(input); err != nil {
		return nil, fmt.Errorf("validation failed for ProductInput: %w", err)
	}

	validated := &ProductInputValidated{}     // Use the generated domain type
	validated.Name = input.Name               // Direct copy
	validated.Price = input.Price             // Direct copy
	validated.Description = input.Description // Direct copy

	return validated, nil
}
