{{/*
	Template for generating ToValidatedX methods.
	Data is of type TemplateData
*/}}

func (input {{.InputTypeName}}) To{{.DomainTypeName}}() (*{{.DomainTypeName}}, error) {
    if err := validate.Struct(input); err != nil {
        return nil, fmt.Errorf("validation failed for {{.InputTypeName}}: %w", err)
    }

    validated := &{{.DomainTypeName}}{} // Use the generated type

    {{range .InputFields}}
        {{if eq .TransformType "hash"}}
            // This would be where you call a password hashing function
            validated.{{.MapToFieldName}} = "hashed_" + input.{{.FieldName}}
        {{else if eq .TransformType "parseTime"}}
            // This would be where you parse a string to time.Time
            parsedTime, err := time.Parse(time.RFC3339, input.{{.FieldName}})
            if err != nil {
                return nil, fmt.Errorf("failed to parse time %s: %w", input.{{.FieldName}}, err)
            }
            validated.{{.MapToFieldName}} = parsedTime
        {{else if eq .TransformType "omit"}}
            // Do nothing, field is omitted
        {{else}}
            validated.{{.FieldName}} = input.{{.FieldName}} // Direct copy
        {{end}}
    {{end}}

    return validated, nil
}