{{/*
	Template for generating ValidatedX struct definitions and ToValidatedX methods.
	Data is of type TemplateData
    {{.DomainTypeName}} represents a validated {{.InputTypeName}}.
    Its existence guarantees that all data within it has passed initial validation rules.
*/}}
type {{.DomainTypeName}} struct {
{{- range .DomainFields}}
	{{.FieldName}} {{.FieldType}}
{{- end}}
}

// To{{.DomainTypeName}} takes a {{.InputTypeName}}, validates it, and if successful,
// converts it into a {{.DomainTypeName}}.
func (input {{.InputTypeName}}) To{{.DomainTypeName}}() (*{{.DomainTypeName}}, error) {
	if err := validate.Struct(input); err != nil {
		return nil, fmt.Errorf("validation failed for {{.InputTypeName}}: %w", err)
	}

	validated := &{{.DomainTypeName}}{} // Use the generated domain type

	{{- range .InputFields}}
		{{- if .JSONTag | eq "-"}}
			// Field '{{.FieldName}}' is omitted from {{$.DomainTypeName}} due to json:"-" tag.
		{{- else if .NeedsHashing}}
			// Convention: Password field detected, assuming needs hashing.
			// In a real application, you would call your actual hashing function here.
			// Example: hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.{{.FieldName}}), bcrypt.DefaultCost)
			// if err != nil { return nil, fmt.Errorf("failed to hash password: %w", err) }
			validated.HashedPassword = "hashed_" + input.{{.FieldName}} // Placeholder for actual hash
		{{- else}}
			validated.{{.FieldName}} = input.{{.FieldName}} // Direct copy
		{{- end}}
	{{- end}}

	return validated, nil
}