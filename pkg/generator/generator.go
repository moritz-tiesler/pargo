package generator

import (
	"bytes"
	_ "embed"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

type TemplateData struct {
	// the file that was processed by go generate
	File string
	// the default output file path
	OutputFile string
	// the struct data that was gathered from the processed file
	StructData []StructData
	// the package name of the processed file
	Package string
	// the imports that will be added to the generated source
	PackageImports map[string]struct{}
	// the directory where go generate is currently executed
	Cwd string
}

type Generator struct{}

func (g *Generator) Generate() error {
	templData, err := g.GenerateData()
	if err != nil {
		return fmt.Errorf("failed to generate data: %s", err)
	}

	f, err := os.OpenFile(templData.OutputFile, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)

	if err != nil {
		return fmt.Errorf("Error opening file %s: %v", templData.OutputFile, err)
	}
	_, err = templData.WriteTo(f)
	if err != nil {
		return fmt.Errorf("Error writing file %s: %v", templData.OutputFile, err)
	}

	log.Printf("Successfully generated and formatted %s\n", templData.OutputFile)
	return nil
}

// StructData holds the information needed to generate code for one Input struct.
type StructData struct {
	InputTypeName  string
	DomainTypeName string
	PackageName    string
	Imports        map[string]struct{} // Collect unique imports needed by generated code

	InputFields  []InputFieldData  // Fields of the Input struct
	DomainFields []DomainFieldData // Fields for the generated Domain struct
}

// InputFieldData represents a field in the Input struct.
type InputFieldData struct {
	FieldName   string
	FieldType   string
	ValidateTag string
	JSONTag     string
}

// DomainFieldData represents a field in the generated Domain struct.
type DomainFieldData struct {
	FieldName string
	FieldType string
	Tag       string // keep all struct tags after validation
}

// TODOs:
// -provide function options (WithPackage, WithImports, WithWrite)
func (td TemplateData) WriteTo(w io.Writer) (int64, error) {

	tmpl, err := template.New("generatorTemplate").Parse(GeneratorTemplate)
	if err != nil {
		log.Fatalf("Error parsing template: %v", err)
	}

	var buf bytes.Buffer
	buf.WriteString("// Code generated by go generate; DO NOT EDIT.\n")
	// buf.WriteString(fmt.Sprintf("package %s\n\n", node.Name.Name))
	buf.WriteString(fmt.Sprintf("package %s\n\n", td.Package))

	// Write imports
	if len(td.PackageImports) > 0 {
		buf.WriteString("import (\n")
		// Sort imports for consistent output
		sortedImports := make([]string, 0, len(td.PackageImports))
		for pkg := range td.PackageImports {
			sortedImports = append(sortedImports, pkg)
		}
		// Standard library imports first, then others
		stdImports := []string{}
		otherImports := []string{}
		for _, imp := range sortedImports {
			if !strings.Contains(imp, ".") { // Simple heuristic for stdlib vs. external
				stdImports = append(stdImports, imp)
			} else {
				otherImports = append(otherImports, imp)
			}
		}
		// strings.Sort(stdImports)
		// strings.Sort(otherImports)

		for _, imp := range stdImports {
			buf.WriteString(fmt.Sprintf("    \"%s\"\n", imp))
		}
		if len(stdImports) > 0 && len(otherImports) > 0 {
			buf.WriteString("\n") // Group imports
		}
		for _, imp := range otherImports {
			buf.WriteString(fmt.Sprintf("    \"%s\"\n", imp))
		}

		buf.WriteString(")\n\n")
	}

	buf.WriteString("var validate = validator.New()\n\n")

	for _, d := range td.StructData {
		err = tmpl.Execute(&buf, d)
		if err != nil {
			log.Fatalf("Error executing template for %s: %v", d.InputTypeName, err)
		}
	}

	// Format the generated code
	formattedSource, err := format.Source(buf.Bytes())
	if err != nil {
		log.Printf("Failed to format generated code. Raw content:\n%s\n", buf.String())
		log.Fatalf("Error formatting generated Go code: %v", err)
	}

	// Write the formatted source to file

	n, err := w.Write(formattedSource)
	if err != nil {
		return 0, err
	}
	return int64(n), nil
}

func (g Generator) GenerateData() (TemplateData, error) {

	var templData TemplateData
	wd, err := os.Getwd()
	if err != nil {
		return templData, fmt.Errorf("Error getting current working directory: %v", err)
	}

	inputFilePath := filepath.Join(wd, os.Getenv("GOFILE"))
	outputPkg := os.Getenv("GOPACKAGE")

	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, inputFilePath, nil, parser.ParseComments)
	if err != nil {
		return templData, fmt.Errorf("Error parsing file %s: %v", inputFilePath, err)
	}

	var allTemplateData []StructData
	packageImports := make(map[string]struct{})

	// Always need these for validation
	packageImports["fmt"] = struct{}{}
	packageImports["github.com/go-playground/validator/v10"] = struct{}{}

	// AST traversal to find struct types with "Input" suffix
	// Todo collect used imports
	for _, decl := range node.Decls {
		genDecl, ok := decl.(*ast.GenDecl)
		if !ok {
			continue
		}
		for _, spec := range genDecl.Specs {
			typeSpec, ok := spec.(*ast.TypeSpec)
			if !ok {
				continue
			}
			structType, ok := typeSpec.Type.(*ast.StructType)
			// if !ok || !strings.HasSuffix(typeSpec.Name.Name, "Input") {
			// 	continue
			// }

			inputTypeName := typeSpec.Name.Name
			domainTypeName := inputTypeName + "Validated" // e.g., UserInput -> ValidatedUser

			var inputFields []InputFieldData
			var domainFields []DomainFieldData

			for _, field := range structType.Fields.List {
				if len(field.Names) == 0 { // Embedded fields or unexported fields without name
					continue
				}
				fieldName := field.Names[0].Name
				fieldType := exprToString(field.Type)
				validateTagValue := getTagValue(field.Tag, "validate")
				jsonTagValue := getTagValue(field.Tag, "json")

				currentInputField := InputFieldData{
					FieldName:   fieldName,
					FieldType:   fieldType,
					ValidateTag: validateTagValue,
					JSONTag:     jsonTagValue,
				}
				inputFields = append(inputFields, currentInputField)

				// Determine domain fields based on json:"-" convention only
				if jsonTagValue == "-" {
					continue // Omit field from domain struct
				}

				var tagValue string
				if field.Tag != nil {
					tagValue = field.Tag.Value
				}

				// All other fields are copied directly with their original name and type
				domainFields = append(domainFields, DomainFieldData{
					FieldName: fieldName,
					FieldType: fieldType,
					Tag:       tagValue,
				})

				// Collect imports for standard types if needed (e.g., time.Time)
				if strings.Contains(fieldType, ".") {
					parts := strings.Split(fieldType, ".")
					if len(parts) > 1 {
						if parts[0] == "time" {
							packageImports["time"] = struct{}{}
						}
						// Add other common packages here as needed (e.g., "encoding/json", "net/url")
					}
				}
			}

			allTemplateData = append(allTemplateData, StructData{
				InputTypeName:  inputTypeName,
				DomainTypeName: domainTypeName,
				PackageName:    node.Name.Name,
				Imports:        packageImports,
				InputFields:    inputFields,
				DomainFields:   domainFields,
			})
		}
	}

	generatedFileName := filepath.Join(
		templData.Cwd,
		strings.TrimSuffix(os.Getenv("GOFILE"), ".go")+"_gen.go",
	)
	templData = TemplateData{
		StructData:     allTemplateData,
		Package:        outputPkg,
		PackageImports: packageImports,
		Cwd:            wd,
		File:           inputFilePath,
		OutputFile:     generatedFileName,
	}
	return templData, nil
}

// Helper functions remain the same
func getTagValue(tag *ast.BasicLit, key string) string {
	if tag == nil {
		return ""
	}
	s := strings.Trim(tag.Value, "`")
	parts := strings.Fields(s)
	for _, part := range parts {
		if strings.HasPrefix(part, key+":") {
			val := strings.TrimPrefix(part, key+":")
			return strings.Trim(val, "\"")
		}
	}
	return ""
}

func exprToString(expr ast.Expr) string {
	switch t := expr.(type) {
	case *ast.Ident:
		return t.Name
	case *ast.SelectorExpr:
		return exprToString(t.X) + "." + t.Sel.Name
	case *ast.StarExpr:
		return "*" + exprToString(t.X)
	case *ast.ArrayType:
		return "[]" + exprToString(t.Elt)
	case *ast.MapType:
		return "map[" + exprToString(t.Key) + "]" + exprToString(t.Value)
	default:
		return fmt.Sprintf("interface{} /* UnsupportedType: %T */", expr)
	}
}
