// Code generated by go generate; DO NOT EDIT.
package main

import (
	"fmt"

	"github.com/go-playground/validator/v10"
)

var validate = validator.New()

type UserInputValidated struct {
	Email       string
	Password    string
	DisplayName string
	CreatedAt   string
	UnusedField string
}

// ToUserInputValidated takes a UserInput, validates it, and if successful,
// converts it into a UserInputValidated.
func (input UserInput) ToUserInputValidated() (*UserInputValidated, error) {
	if err := validate.Struct(input); err != nil {
		return nil, fmt.Errorf("validation failed for UserInput: %w", err)
	}

	validated := &UserInputValidated{}        // Use the generated domain type
	validated.Email = input.Email             // Direct copy
	validated.Password = input.Password       // Direct copy
	validated.DisplayName = input.DisplayName // Direct copy
	validated.CreatedAt = input.CreatedAt     // Direct copy
	validated.UnusedField = input.UnusedField // Direct copy

	return validated, nil
}

type ProductInputValidated struct {
	Name        string
	Price       float64
	Description string
}

// ToProductInputValidated takes a ProductInput, validates it, and if successful,
// converts it into a ProductInputValidated.
func (input ProductInput) ToProductInputValidated() (*ProductInputValidated, error) {
	if err := validate.Struct(input); err != nil {
		return nil, fmt.Errorf("validation failed for ProductInput: %w", err)
	}

	validated := &ProductInputValidated{}     // Use the generated domain type
	validated.Name = input.Name               // Direct copy
	validated.Price = input.Price             // Direct copy
	validated.Description = input.Description // Direct copy

	return validated, nil
}
